import { MouseEvent, useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { Inter } from '@next/font/google';
import styles from '@/styles/Home.module.css';
import { useQuery, useQueryClient } from 'react-query';
import { useState } from 'react';
import PostDetail from '@/components/PostDetail';

const inter = Inter({ subsets: ['latin'] });

export type PostsState = {
  userId: number;
  id: number;
  title: string;
  body: string;
};

const maxPostPage = 10;

async function fetchPosts(currPage: number) {
  const reponse = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=${maxPostPage}&_page=${currPage}`);
  return reponse.json();
}

export default function Home() {
  const [currPage, setCurrPage] = useState(1);
  const [currPost, setCurrPostBody] = useState<PostsState>();

  const queryClient = useQueryClient();

  useEffect(() => {
    if (currPage < maxPostPage) {
      const nextPage = currPage + 1;
      queryClient.prefetchQuery(['posts', nextPage], () => fetchPosts(nextPage));
    }
  }, [currPage, queryClient]);

  const { data, isLoading, isError, error } = useQuery<PostsState[]>(['posts', currPage], () => fetchPosts(currPage), {
    keepPreviousData: true,
  });

  if (isError) {
    return (
      <>
        <h1>Something wrong</h1>
        <span>{error?.toString()}</span>
      </>
    );
  }

  if (isLoading) {
    return <span>loading...</span>;
  }

  const onClick = (post: PostsState) => {
    setCurrPostBody(post);
  };

  const onPreviousPageClick = () => {
    setCurrPage((pre) => {
      if (pre === 1) {
        return pre;
      }
      return pre - 1;
    });
  };

  const onNextPageClick = () => {
    setCurrPage((pre) => pre + 1);
  };

  return (
    <>
      <Head>
        <title>New Study App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <h1>React Query</h1>
        <ul>
          {data?.map((post) => (
            <li key={post.id} id={post.id + ''} onClick={() => onClick(post)}>
              <h3>{post.title}</h3>
            </li>
          ))}
        </ul>
        <div className='buttonGroup'>
          <button type='button' disabled={currPage <= 1} onClick={onPreviousPageClick}>
            Previous Page
          </button>
          <span>
            {currPage} / {maxPostPage}
          </span>
          <button type='button' disabled={currPage >= maxPostPage} onClick={onNextPageClick}>
            Next Page
          </button>
        </div>
        <br />
        {currPost && <PostDetail post={currPost} />}
      </main>
    </>
  );
}
